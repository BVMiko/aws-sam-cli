version: 1.0.{build}
image: Windows Server 2019
build: off

# Change the clone folder to somewhere in "D:\" because this is shared by default with Docker. We need this to mount folders.
clone_folder: D:\source

configuration:
  - Sequential
  - Parallel
  - RestOfThem

environment:
  AWS_DEFAULT_REGION: sa-east-1
  AWS_REGION: sa-east-1
  SAM_CLI_DEV: 1

  # In Windows, tempdir is usually in C:\. But in AppVeyor only D:\ is shared in Docker. 
  # Therefore change TEMPDIR it to D: for invoke tests to work. Python uses $TMPDIR envvar
  # to find root of tempdir
  TMPDIR: D:\tmp
  TEMP: D:\tmp
  TMP: D:\tmp

  # MSI Installers only use Py3.7.6. It is sufficient to test with this version here.
  PYTHON_HOME: "C:\\Python37-x64"
  PYTHON_SCRIPTS: "C:\\Python37-x64\\Scripts"
  PYTHON_EXE: "C:\\Python37-x64\\python.exe"
  PYTHON_ARCH: '64'
  HOME: 'C:\Users\appveyor'
  HOMEDRIVE: 'C:'
  HOMEPATH: 'C:\Users\appveyor'
  NOSE_PARAMETERIZED_NO_WARN: 1
  AWS_S3: 'AWS_S3_37_WIN'
  AWS_ECR: 'AWS_ECR_37'
  APPVEYOR_CONSOLE_DISABLE_PTY: true

cache:
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

init:
  # Uncomment this for RDP
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: gcim Win32_Processor | % { "$($_.NumberOfLogicalProcessors) logical CPUs" }
  - ps: gcim Win32_OperatingSystem | % { "$([int]($_.TotalVisibleMemorySize/1mb)) Gb" }

install:
  # setup make
  - "choco install make"

  # Make sure the temp directory exists for Python to use.
  - ps: "mkdir -Force D:\\tmp"
  - "SET PATH=%PYTHON_HOME%;%PATH%"
  - "echo %PYTHON_HOME%"
  - "echo %PATH%"
  - "python --version"
  - "docker info"

  # Upgrade setuptools, wheel and virtualenv
  - "python -m pip install --upgrade setuptools wheel virtualenv"

  # Install AWS CLI Globally via pip3
  - "pip install awscli"

  # Create pre-dev virtual env without installing dev depenencies
  # This is used for import check for prod code to prevent importing packages from dev.txt
  - "rm -rf pre-dev-venv"
  - "python -m virtualenv pre-dev-venv"
  - "pre-dev-venv\\Scripts\\activate"
  - "python --version"
  - "deactivate"

  # Create dev virtual env
  - "rm -rf venv"
  - "python -m virtualenv venv"
  - "venv\\Scripts\\activate"
  - "python --version"
  - "deactivate"

  # Switch to Docker Linux containers
  - ps: Switch-DockerLinux

  # Check for git executable
  - "git --version"

  # Echo final Path
  - "echo %PATH%"

for:
  - matrix:
      only:
        - configuration: RestOfThem

    build_script:
      # Install pre-dev dependencies
      # This env is currently used for doing import check with Pylint without dev.txt dependencies installed
      - "pre-dev-venv\\Scripts\\activate"
      - "python -c \"import sys; print(sys.executable)\""
      - "pip install -e \".[pre-dev]\""
      - "deactivate"

      # Install dev dependencies
      - "venv\\Scripts\\activate"
      - "python -c \"import sys; print(sys.executable)\""
      - "pip install -e \".[dev]\""
      - "deactivate"

    test_script:
      - ps: "
        If (Test-Path env:BY_CANARY){
          echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;
        }"
      - "git --version"
      - "venv\\Scripts\\activate"
      - "docker system prune -a -f"
      # Run pylint on pre-dev env to catch import errors
      - "pre-dev-venv\\Scripts\\activate"
      - "pylint --rcfile .pylintrc samcli"
      - "deactivate"

      # Run tests with dev env
      - "venv\\Scripts\\activate"
      - "pytest --cov samcli --cov-report term-missing --cov-fail-under 94 tests/unit"
      - "pylint --rcfile .pylintrc samcli"
      - "mypy setup.py samcli tests"
      - "pytest -n 4 tests/functional"
      - "pytest -vv tests/regression"
      - "deactivate"

  - matrix:
      only:
        - configuration: Sequential

    test_script:
      - ps: "
        If (Test-Path env:BY_CANARY){
          echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;
        }"
      - "git --version"
      - "venv\\Scripts\\activate"
      - "docker system prune -a -f"
      - "pytest -vv -m sequential tests/integration" # run other in sequential

  - matrix:
      only:
        - configuration: Parallel

    test_script:
      - ps: "
        If (Test-Path env:BY_CANARY){
          echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;
        }"
      - "git --version"
      - "venv\\Scripts\\activate"
      - "docker system prune -a -f"
      - "pytest -vv -n 4 -m \"not sequential\" tests/integration" # run some tests in parallel

# Uncomment for RDP
# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
